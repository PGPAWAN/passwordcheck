#include "postgres.h"
#include <ctype.h>

#ifdef USE_CRACKLIB
#include <crack.h>
#endif

#include "commands/user.h"
#include "fmgr.h"
#include "libpq/crypt.h"

PG_MODULE_MAGIC;

static check_password_hook_type prev_check_password_hook = NULL;

#define MIN_PWD_LENGTH 8

static void
check_password(const char *username,
               const char *shadow_pass,
               PasswordType password_type,
               Datum validuntil_time,
               bool validuntil_null)
{
    if (prev_check_password_hook)
        prev_check_password_hook(username, shadow_pass,
                                 password_type, validuntil_time,
                                 validuntil_null);

    if (password_type != PASSWORD_TYPE_PLAINTEXT)
    {
        const char *logdetail = NULL;

        if (plain_crypt_verify(username, shadow_pass, username, &logdetail) == STATUS_OK)
            ereport(ERROR,
                    (errcode(ERRCODE_INVALID_PARAMETER_VALUE),
                     errmsg("password must not equal user name")));
    }
    else
    {
        const char *password = shadow_pass;
        int pwdlen = strlen(password);
        int i;
        bool pwd_has_upper = false;
        bool pwd_has_lower = false;
        bool pwd_has_digit = false;
        bool pwd_has_special = false;

        if (pwdlen < MIN_PWD_LENGTH)
            ereport(ERROR,
                    (errcode(ERRCODE_INVALID_PARAMETER_VALUE),
                     errmsg("password is too short")));

        if (strstr(password, username))
            ereport(ERROR,
                    (errcode(ERRCODE_INVALID_PARAMETER_VALUE),
                     errmsg("password must not contain user name")));

        for (i = 0; i < pwdlen; i++)
        {
            if (isupper((unsigned char)password[i]))
                pwd_has_upper = true;
            else if (islower((unsigned char)password[i]))
                pwd_has_lower = true;
            else if (isdigit((unsigned char)password[i]))
                pwd_has_digit = true;
            else
                pwd_has_special = true;
        }

        if (!(pwd_has_upper && pwd_has_lower && pwd_has_digit && pwd_has_special))
            ereport(ERROR,
                    (errcode(ERRCODE_INVALID_PARAMETER_VALUE),
                     errmsg("password must contain at least one uppercase letter, one lowercase letter, one digit, and one special character")));

        if (pwd_has_upper && pwd_has_lower && pwd_has_digit && pwd_has_special)
            ereport(NOTICE,
                    (errmsg("password complexity requirements satisfied")));
    }

    /* all checks passed, password is ok */
}

void
_PG_init(void)
{
    prev_check_password_hook = check_password_hook;
    check_password_hook = check_password;
}
